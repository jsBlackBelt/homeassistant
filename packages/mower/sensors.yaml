# ##########################################################################
# Robonect
# ##########################################################################
# - platform: mqtt
#   state_topic: "robonect/device/name"
# - platform: mqtt
#   state_topic: "robonect/device/serial"
- platform: mqtt
  state_topic: "robonect/health/climate/humidity"
  name: "Robonect Sileno Health Humidity"
  unit_of_measurement: '%'
- platform: mqtt
  state_topic: "robonect/health/climate/temperature"
  name: "Robonect Sileno Health Temperature"
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "robonect/health/voltage/batt"
  name: "Robonect Sileno Health Voltage Battery"
  unit_of_measurement: 'V'
- platform: mqtt
  state_topic: "robonect/health/voltage/ext33"
  name: "Robonect Sileno Health Voltage Mower"
  unit_of_measurement: 'V'
- platform: mqtt
  state_topic: "robonect/health/voltage/int33"
  name: "Robonect Sileno Health Voltage Robonect"
  unit_of_measurement: 'V'
- platform: mqtt
  state_topic: "robonect/mower/battery/charge"
  name: "Robonect Sileno Battery"
  unit_of_measurement: '%'
  device_class: battery
- platform: mqtt
  state_topic: "robonect/mower/distance"
  name: "Robonect Sileno Distance"
  unit_of_measurement: 'm'
- platform: mqtt
  state_topic: "robonect/mower/mode"
  name: "Robonect Sileno Mode"
- platform: mqtt
  state_topic: "robonect/mower/statistic/hours"
  name: "Robonect Sileno Statistic Hours"
  unit_of_measurement: 'h'
- platform: mqtt
  state_topic: "robonect/mower/status"
  name: "Robonect Sileno Status"
- platform: mqtt
  state_topic: "robonect/mower/status/duration"
- platform: mqtt
  state_topic: "robonect/mower/status/plain"
  name: "Robonect Sileno Status Plain"
- platform: mqtt
  state_topic: "robonect/mower/stopped"
  name: "Robonect Sileno Stopped"
- platform: mqtt
  state_topic: "robonect/mqtt"
  name: "Robonect Sileno Online"
- platform: mqtt
  state_topic: "robonect/passage/open"
  name: "Robonect Sileno Passage Open"
- platform: mqtt
  state_topic: "robonect/weather/data/break"
  name: "Robonect Sileno Weather Break"
- platform: mqtt
  state_topic: "robonect/weather/data/humidity"
  name: "Robonect Sileno Weather Humidity"
  unit_of_measurement: '%'
- platform: mqtt
  state_topic: "robonect/weather/data/rain"
  name: "Robonect Sileno Weather Rain"
  unit_of_measurement: 'mm'
- platform: mqtt
  state_topic: "robonect/weather/data/temperature"
  name: "Robonect Sileno Weather Temperature"
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "robonect/weather/service"
- platform: mqtt
  state_topic: "robonect/wlan/rssi"
  name: "Robonect Sileno Wi-Fi Strength"
  unit_of_measurement: 'dBm'

# ##########################################################################
# Gardena
# ##########################################################################
- platform: template
  sensors:
    gardena_sileno_battery_charging:
      value_template: "{{ states.vacuum.sileno_city.attributes.battery_charging }}"
      friendly_name: "Ladevorgang"
    gardena_sileno_battery_level:
      value_template: "{{ states.vacuum.sileno_city.attributes.battery_level }}"
      unit_of_measurement: '%'
      friendly_name: "Batteriestand"
    gardena_sileno_category:
      value_template: "{{ states.vacuum.sileno_city.attributes.category }}"
      friendly_name: "Kategorie"
    gardena_sileno_radio_quality:
      value_template: "{{ states.vacuum.sileno_city.attributes.radio_quality }}"
      unit_of_measurement: '%'
      friendly_name: "Qualität Wi-Fi"
    gardena_sileno_radio_connection_status:
      value_template: "{{ states.vacuum.sileno_city.attributes.radio_connection_status }}"
      friendly_name: "Verbindung Status"
    gardena_sileno_radio_state:
      value_template: "{{ states.vacuum.sileno_city.attributes.radio_state }}"
      friendly_name: "Verbindung Status"
    gardena_sileno_manual_operation:
      value_template: "{{ states.vacuum.sileno_city.attributes.manual_operation }}"
      friendly_name: "Manueller Modus"
    gardena_sileno_status:
      value_template: >-
        {% if is_state('vacuum.sileno_city', '"ok_cutting"') %}
          Mäht
        {% elif is_state('vacuum.sileno_city', 'parked_timer') %}
          Geparkt
        {% else %}
          "{{ states.vacuum.sileno_city.attributes.status }}"
        {% endif %}
      friendly_name: "Status"
    gardena_sileno_error:
      value_template: "{{ states.vacuum.sileno_city.attributes.error }}"
      friendly_name: "Fehlermeldung"
    gardena_sileno_last_error_code:
      value_template: "{{ states.vacuum.sileno_city.attributes.last_error_code }}"
      friendly_name: "Fehlercode"
    gardena_sileno_source_for_next_start:
      value_template: "{{ states.vacuum.sileno_city.attributes.source_for_next_start }}"
      friendly_name: "Nächste Startart"
    gardena_sileno_timestamp_next_start:
      value_template: "{{ ((as_timestamp(states.vacuum.sileno_city.attributes.timestamp_next_start)) | timestamp_local) }}"
      friendly_name: "Nächster Start"
    gardena_sileno_cutting_time:
      value_template: "{{ states.vacuum.sileno_city.attributes.cutting_time }}"
      unit_of_measurement: hours
      friendly_name: "Mähzeit (total)"
    gardena_sileno_charging_cycles:
      value_template: "{{ states.vacuum.sileno_city.attributes.charging_cycles }}"
      unit_of_measurement: ''
      friendly_name: "Ladezyklen (total)"
    gardena_sileno_collisions:
      value_template: "{{ states.vacuum.sileno_city.attributes.collisions }}"
      unit_of_measurement: ''
      friendly_name: "Kollisionen (total)"
    gardena_sileno_running_time:
      value_template: "{{ states.vacuum.sileno_city.attributes.running_time }}"
      unit_of_measurement: hours
      friendly_name: "Laufzeit (total)"
    gardena_sileno_friendly_name:
      value_template: "{{ states.vacuum.sileno_city.attributes.friendly_name }}"
      friendly_name: "Name"
